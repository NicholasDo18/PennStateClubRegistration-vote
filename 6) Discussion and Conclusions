Project Issues and Limitations:
1.) Simplified Voting System: 
This project implements a basic voting system for a club, but it may lack certain features found in real-world voting systems, such as authentication, security measures, and more complex voting mechanisms.

2.) No Data Persistence: 
The project does not include any data persistence mechanism, meaning that all registered members and voting results will be lost once the program terminates. Implementing a database or file storage system could address this limitation.

3.)Limited Error Handling: 
while the project includes some error handling for invalid inputs and actions, it may not cover all possible edge cases. Improving error handling could enhance the robustness of the system.

4.) Single-User Interface:
The project provides a command-line interface for a single user at a time. In a real-world scenario, a voting system may require a multi-user interface to handle concurrent interactions from multiple users.

5.) 
Static Candidate Options: The project defines fixed candidate options for each role (e.g., 'Candidate 1' and 'Candidate 2'). In a more dynamic system, candidates might need to be added or removed dynamically.

Application of Course Learnings:
1.) Object-Oriented Programming (OOP): 
The project demonstrates OOP principles by using classes (ClubMember and ClubVoteRegistrationSystem) to model real-world entities and encapsulate their behavior and data.

2.) Data Structures: 
The project uses dictionaries to store member data (self.members) and voting results (self.poll_results). Understanding data structures helps in organizing and manipulating data efficiently.
Class- 'ClubMember' represents a club member with attributes such as name, email, membership status, and a set to track roles.
Linked List- implemented to store instances of ClubMember. Each node in the linked list contains a ClubMember object and a reference to the next node. Also efficient in insertion, deletion, and traversal operations.
Set- The voted_roles attribute within the ClubMember class is a set. It is used to track which roles a member has voted for to prevent duplicate votes. 

3.) Error Handling: 
The project incorporates error-handling techniques to manage potential runtime errors and provide informative feedback to users. Handling exceptions is an essential aspect of software development.

4.) User Interface Design: 
The project features a simple command-line interface that allows users to interact with the voting system. Designing user interfaces effectively requires considering user experience and usability.


Overall, this project provides a practical opportunity to apply theoretical concepts learned in a programming or software engineering course to develop a functional voting system. Further enhancements and refinements could be made to address the identified limitations and create a more robust and feature-rich application.
